{"version":3,"sources":["Components/StockData.js","Components/StockChart.js","Components/Form.js","Components/NavBar.js","Components/News.js","Components/StockTitle.js","Components/ModeChange.js","Components/Footer.js","Components/Enter.js","Components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["makeNumNormal","labelValue","Math","abs","Number","round","StockData","props","id","name","className","mode","open","dayHigh","dayLow","pe","eps","mktCap","yearHigh","yearLow","avgVol","symbol","toggle","widgetType","TECHNICAL_ANALYSIS","widgetConfig","StockChart","MARKET_OVERVIEW","hidePlaceholder","event","target","placeholder","showPlaceholder","Form","onSubmit","getTicker","type","onFocus","onBlur","navOn","display","navOff","Navbar","state","navState","navToggler","React","createRef","navToggle","bind","this","setState","console","log","href","onClick","ref","for","src","style","Component","News","articles","StockTitle","price","closeYesterday","daychange","changepct","ModeChanger","onChange","changeMode","modeChanger","Footer","TICKER_TAPE","Enter","error","undefined","Profile","COMPANY_PROFILE","App","exchange","bg","backgroundColor","e","a","preventDefault","ticker","elements","value","fetch","api_call","api_call2","json","data","data2","map","i","index","key","url","source","title","description","checked","background","ModeChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e7eb324.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { TradingViewEmbed, widgetType } from \"react-tradingview-embed\";\r\n\r\n\r\nconst makeNumNormal = (labelValue) => {\r\n    // Nine Zeroes for Billions\r\n    return Math.abs(Number(labelValue)) >= 1.0e+9\r\n    ? Math.round(Math.abs(Number(labelValue)) / 1.0e+9 *10 )/10 + \"B\"\r\n    // Six Zeroes for Millions \r\n    : Math.abs(Number(labelValue)) >= 1.0e+6\r\n    ? Math.round(Math.abs(Number(labelValue)) / 1.0e+6 * 10)/10 + \"M\"\r\n    // Three Zeroes for Thousands\r\n    : Math.abs(Number(labelValue)) >= 1.0e+3\r\n    ? Math.round(Math.abs(Number(labelValue)) / 1.0e+3 *10)/10 + \"K\"\r\n    : Math.abs(Number(labelValue));\r\n}\r\n\r\nconst StockData = (props) => (\r\n\r\n    <div id=\"info\">\r\n        {props.name &&\r\n        <div className=\"stock-data\">\r\n            <div className={\"stock-data-text-\"+props.mode} id=\"stock-data-text\">\r\n                <p> Open </p>\r\n                <p> High </p>\r\n                <p> Low </p>\r\n            </div>\r\n\r\n\r\n            <div className={\"stock-data-values-\"+props.mode} id=\"stock-data-values\">\r\n                <p> {props.open} </p>\r\n                <p> {props.dayHigh} </p>\r\n                <p> {props.dayLow} </p>\r\n            </div>\r\n\r\n            <div className={\"stock-data-border-\"+props.mode} id=\"stock-data-border\" />\r\n\r\n            <div className={\"stock-data-text-\"+props.mode} id=\"stock-data-text\">\r\n                <p> P/E </p>\r\n                <p> EPS </p>\r\n                <p> Mkt Cap </p>\r\n            </div>\r\n\r\n            <div className={\"stock-data-values-\"+props.mode} id=\"stock-data-values\">\r\n                <p> {props.pe} </p>\r\n                <p> {props.eps} </p>\r\n                <p> {makeNumNormal(props.mktCap)} </p>\r\n            </div>\r\n\r\n            <div className='border-wrapper'>\r\n                <div className={\"stock-data-border-\"+props.mode} id=\"stock-data-border\"/>\r\n            </div>\r\n\r\n            <div className={\"stock-data-text-\"+props.mode} id=\"stock-data-text\">\r\n                <p> 52 Wk H</p>\r\n                <p> 52 Wk L</p>\r\n                <p> Avg Vol </p>\r\n            </div>\r\n\r\n            <div className={\"stock-data-values-\"+props.mode} id=\"stock-data-values\">\r\n                <p> {props.yearHigh} </p>\r\n                <p> {props.yearLow} </p>\r\n                <p> {makeNumNormal(props.avgVol)} </p>\r\n            </div>\r\n\r\n            <div className={\"stock-data-border-\"+props.mode} id=\"stock-data-border\"/>\r\n\r\n\r\n            <div id=\"technical-analysis\" className=\"technical-analysis\">\r\n                {props.symbol &&\r\n                <div>\r\n\r\n                    {props.toggle === \"Y\" ?\r\n                    <div className='technical-analysis-widget'>\r\n                        {props.mode === 'light' &&\r\n                        <TradingViewEmbed\r\n                        widgetType={widgetType.TECHNICAL_ANALYSIS}\r\n                        widgetConfig={\r\n                            {\r\n                                \"interval\": \"1M\",\r\n                                \"width\": \"100%\",\r\n                                \"colorTheme\": \"light\",\r\n                                \"isTransparent\": true,\r\n                                \"height\": \"400\",\r\n                                \"symbol\": props.symbol,\r\n                                \"showIntervalTabs\": true,\r\n                                \"locale\": \"en\"\r\n                            }\r\n                        }\r\n                        />\r\n                    }\r\n                    {props.mode === 'dark' &&\r\n                        <TradingViewEmbed\r\n                        widgetType={widgetType.TECHNICAL_ANALYSIS}\r\n                        widgetConfig={\r\n                            {\r\n                                \"interval\": \"1M\",\r\n                                \"width\": \"100%\",\r\n                                \"colorTheme\": \"dark\",\r\n                                \"isTransparent\": true,\r\n                                \"height\": \"400\",\r\n                                \"symbol\": props.symbol,\r\n                                \"showIntervalTabs\": true,\r\n                                \"locale\": \"en\"\r\n                            }\r\n                        }\r\n                        />\r\n                    }\r\n                    </div>: <div/>\r\n                    } \r\n\r\n                    {props.toggle === \"N\" ?\r\n                    <div className='technical-analysis-widget'>\r\n                        {props.mode === 'light' &&\r\n                        <TradingViewEmbed\r\n                        widgetType={widgetType.TECHNICAL_ANALYSIS}\r\n                        widgetConfig={\r\n                            {\r\n                                \"interval\": \"1M\",\r\n                                \"width\": \"100%\",\r\n                                \"colorTheme\": \"light\",\r\n                                \"isTransparent\": true,\r\n                                \"height\": \"400\",\r\n                                \"symbol\": props.symbol,\r\n                                \"showIntervalTabs\": true,\r\n                                \"locale\": \"en\"\r\n                            }\r\n                        }\r\n                        />\r\n                    }\r\n                    {props.mode === 'dark' &&\r\n                        <TradingViewEmbed\r\n                        widgetType={widgetType.TECHNICAL_ANALYSIS}\r\n                        widgetConfig={\r\n                            {\r\n                                \"interval\": \"1M\",\r\n                                \"width\": \"100%\",\r\n                                \"colorTheme\": \"dark\",\r\n                                \"isTransparent\": true,\r\n                                \"height\": \"400\",\r\n                                \"symbol\": props.symbol,\r\n                                \"showIntervalTabs\": true,\r\n                                \"locale\": \"en\"\r\n                            }\r\n                        }\r\n                        />\r\n                    }\r\n                    </div>: <div/>\r\n                    } \r\n                </div>\r\n                } \r\n            </div>\r\n        </div>\r\n\r\n        }\r\n    </div>\r\n\r\n\r\n\r\n)\r\n\r\n\r\n/*\r\n\r\nclass StockData extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id='info'>\r\n            {this.props.name && <h2 className=\"section-title\" id={'section-title-'+this.props.mode}>Company Information </h2>}\r\n\r\n\r\n                <div className=\"stock-key-container\">\r\n                    <div>\r\n                        {this.props.name &&    \r\n                        <div>\r\n                            <div className=\"stock-key\" id={'stock-key-'+this.props.mode}>\r\n                                <p> Company: { this.props.name } </p> \r\n                                <p> Price: ${ this.props.price} </p> \r\n                                <p> PE: {this.props.pe}</p>\r\n                                <p> 52 Week High: {this.props.yearHigh}</p>\r\n                                <p> 52 Week Low: {this.props.yearLow}</p>\r\n                                <p> Exchange: {this.props.exchange}</p>\r\n                                <p> {this.props.error} </p> \r\n                            </div>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        ); \r\n    }\r\n}\r\n\r\n*/\r\n\r\n\r\nexport default StockData;","import React from 'react';\r\n\r\n\r\nimport { TradingViewEmbed, widgetType } from \"react-tradingview-embed\";\r\nimport TradingViewWidget, { Themes } from 'react-tradingview-widget';\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\nclass StockChart extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this._ref = React.createRef();\r\n  }\r\n\r\n\r\n  getChartData() {\r\n    const symbolString = String(this.props.symbol)\r\n    return (\r\n      JSON.stringify({\r\n        \"colorTheme\": 'light',\r\n        \"dateRange\": \"1d\",\r\n        \"showChart\": true,\r\n        \"locale\": \"en\",\r\n        \"largeChartUrl\": \"\",\r\n        \"isTransparent\": true,\r\n        \"width\": \"100%\",\r\n        \"height\": \"400\",\r\n        \"plotLineColorGrowing\": \"rgb(47, 196, 141)\",\r\n        \"plotLineColorFalling\": \"rgb(229, 64, 18)\",\r\n        \"gridLineColor\": \"rgba(240, 243, 250, 0)\",\r\n        \"scaleFontColor\": \"rgba(120, 123, 134, 1)\",\r\n        \"belowLineFillColorGrowing\": \"rgba(87, 243, 144, 0.12)\",\r\n        \"belowLineFillColorFalling\": \"rgba(243, 15, 15, 0.12)\",\r\n        \"symbolActiveColor\": \"rgba(33, 150, 243, 0.12)\",\r\n        \"tabs\": [\r\n          {\r\n            \"title\": \"Stocks\",\r\n            \"symbols\": [\r\n              {\r\n                \"s\": \"BABA\"\r\n              }\r\n            ],\r\n          }\r\n        ]\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"chart-widget\" ref={this._ref}>\r\n      <div class=\"tradingview-widget-container__widget\"></div>\r\n\r\n  </div>\r\n\r\n    )\r\n  }\r\n\r\n  componentDidMount() {\r\n    const script = document.createElement('script');\r\n    script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-market-overview.js'\r\n    script.async = true;\r\n    script.innerHTML = this.getChartData()\r\n\r\n    this._ref.current.appendChild(script);\r\n  }\r\n}\r\n*/\r\n\r\n\r\n\r\n\r\nconst StockChart = (props) => (\r\n\r\n  <div id=\"chart\" >\r\n\r\n    <div>\r\n      {props.symbol &&\r\n        <div>\r\n          {props.toggle === \"Y\" ?\r\n            <div className='chart-widget'>\r\n              {props.mode === 'light' &&\r\n              <TradingViewEmbed\r\n                widgetType={widgetType.MARKET_OVERVIEW}\r\n                widgetConfig={\r\n                {\r\n                  \"colorTheme\": 'light',\r\n                  \"dateRange\": \"1d\",\r\n                  \"showChart\": true,\r\n                  \"locale\": \"en\",\r\n                  \"largeChartUrl\": \"\",\r\n                  \"isTransparent\": true,\r\n                  \"width\": \"100%\",\r\n                  \"height\": \"400\",\r\n                  \"plotLineColorGrowing\": \"rgb(47, 196, 141)\",\r\n                  \"plotLineColorFalling\": \"rgb(229, 64, 18)\",\r\n                  \"gridLineColor\": \"rgba(240, 243, 250, 0)\",\r\n                  \"scaleFontColor\": \"rgba(120, 123, 134, 1)\",\r\n                  \"belowLineFillColorGrowing\": \"rgba(87, 243, 144, 0.12)\",\r\n                  \"belowLineFillColorFalling\": \"rgba(243, 15, 15, 0.12)\",\r\n                  \"symbolActiveColor\": \"rgba(33, 150, 243, 0.12)\",\r\n                  \"tabs\": [\r\n                    {\r\n                      \"title\": \"Stocks\",\r\n                      \"symbols\": [\r\n                        {\r\n                          \"s\": props.symbol\r\n                        }\r\n                      ],\r\n                    }\r\n                  ]\r\n                }\r\n              }\r\n              />\r\n            }\r\n            {props.mode === 'dark' &&\r\n              <TradingViewEmbed\r\n                widgetType={widgetType.MARKET_OVERVIEW}\r\n                widgetConfig={\r\n                {\r\n                  \"colorTheme\": 'dark',\r\n                  \"dateRange\": \"1d\",\r\n                  \"showChart\": true,\r\n                  \"locale\": \"en\",\r\n                  \"largeChartUrl\": \"\",\r\n                  \"isTransparent\": true,\r\n                  \"width\": \"100%\",\r\n                  \"height\": \"400\",\r\n                  \"plotLineColorGrowing\": \"rgb(47, 196, 141)\",\r\n                  \"plotLineColorFalling\": \"rgb(229, 64, 18)\",\r\n                  \"gridLineColor\": \"rgba(240, 243, 250, 0)\",\r\n                  \"scaleFontColor\": \"rgba(120, 123, 134, 1)\",\r\n                  \"belowLineFillColorGrowing\": \"rgba(87, 243, 144, 0.12)\",\r\n                  \"belowLineFillColorFalling\": \"rgba(243, 15, 15, 0.12)\",\r\n                  \"symbolActiveColor\": \"rgba(33, 150, 243, 0.12)\",\r\n                  \"tabs\": [\r\n                    {\r\n                      \"title\": \"Stocks\",\r\n                      \"symbols\": [\r\n                        {\r\n                          \"s\": props.symbol\r\n                        }\r\n                      ],\r\n                    }\r\n                  ]\r\n                }\r\n              }\r\n              />\r\n            }\r\n            </div> : <div/>\r\n          } \r\n\r\n          {props.toggle === \"N\" ?\r\n            <div className='chart-widget'>\r\n              {props.mode === 'light' &&\r\n              <TradingViewEmbed\r\n                widgetType={widgetType.MARKET_OVERVIEW}\r\n                widgetConfig={\r\n                {\r\n                  \"colorTheme\": 'light',\r\n                  \"dateRange\": \"1d\",\r\n                  \"showChart\": true,\r\n                  \"locale\": \"en\",\r\n                  \"largeChartUrl\": \"\",\r\n                  \"isTransparent\": true,\r\n                  \"width\": \"100%\",\r\n                  \"height\": \"400\",\r\n                  \"plotLineColorGrowing\": \"rgb(47, 196, 141)\",\r\n                  \"plotLineColorFalling\": \"rgb(229, 64, 18)\",\r\n                  \"gridLineColor\": \"rgba(240, 243, 250, 0)\",\r\n                  \"scaleFontColor\": \"rgba(120, 123, 134, 1)\",\r\n                  \"belowLineFillColorGrowing\": \"rgba(87, 243, 144, 0.12)\",\r\n                  \"belowLineFillColorFalling\": \"rgba(243, 15, 15, 0.12)\",\r\n                  \"symbolActiveColor\": \"rgba(33, 150, 243, 0.12)\",\r\n                  \"tabs\": [\r\n                    {\r\n                      \"title\": \"Stocks\",\r\n                      \"symbols\": [\r\n                        {\r\n                          \"s\": props.symbol\r\n                        }\r\n                      ],\r\n                    }\r\n                  ]\r\n                }\r\n              }\r\n              />\r\n            }\r\n            {props.mode === 'dark' &&\r\n              <TradingViewEmbed\r\n                widgetType={widgetType.MARKET_OVERVIEW}\r\n                widgetConfig={\r\n                {\r\n                  \"colorTheme\": 'dark',\r\n                  \"dateRange\": \"1d\",\r\n                  \"showChart\": true,\r\n                  \"locale\": \"en\",\r\n                  \"largeChartUrl\": \"\",\r\n                  \"isTransparent\": true,\r\n                  \"width\": \"100%\",\r\n                  \"height\": \"400\",\r\n                  \"plotLineColorGrowing\": \"rgb(47, 196, 141)\",\r\n                  \"plotLineColorFalling\": \"rgb(229, 64, 18)\",\r\n                  \"gridLineColor\": \"rgba(240, 243, 250, 0)\",\r\n                  \"scaleFontColor\": \"rgba(120, 123, 134, 1)\",\r\n                  \"belowLineFillColorGrowing\": \"rgba(87, 243, 144, 0.12)\",\r\n                  \"belowLineFillColorFalling\": \"rgba(243, 15, 15, 0.12)\",\r\n                  \"symbolActiveColor\": \"rgba(33, 150, 243, 0.12)\",\r\n                  \"tabs\": [\r\n                    {\r\n                      \"title\": \"Stocks\",\r\n                      \"symbols\": [\r\n                        {\r\n                          \"s\": props.symbol\r\n                        }\r\n                      ],\r\n                    }\r\n                  ]\r\n                }\r\n              }\r\n              />\r\n            }\r\n            </div> : <div/>\r\n          } \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n        } \r\n    </div>\r\n  </div>\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\nconst StockChart = (props) => (\r\n\r\n  <div id=\"chart\" >\r\n    {props.symbol &&\r\n      <div className='chart-widget'>\r\n          <TradingViewWidget\r\n            symbol={props.symbol}\r\n            locale=\"en\"\r\n            autosize\r\n            theme={Themes.DARK}\r\n            interval=\"D\"\r\n            style=\"0\"\r\n            enable_publishing=\"false\"\r\n            hide_legend='true'\r\n            isTransparent= \"true\"\r\n            color=\"#1B1B1D\"\r\n            plotLineColorGrowing= \"rgba(47, 196, 141, 1)\"\r\n            plotLineColorFalling= \"rgba(25, 118, 210, 1)\"\r\n            gridLineColor= \"rgba(42, 46, 57, 1)\"\r\n            scaleFontColor= \"rgba(120, 123, 134, 1)\"\r\n            belowLineFillColorGrowing= \"rgba(33, 150, 243,0.12)\"\r\n            belowLineFillColorFalling= \"rgba(33, 150, 243, 0.12)\"\r\n            symbolActiveColor= \"rgba(33, 150, 243, 0.12)\"\r\n          />\r\n      </div>\r\n    } \r\n  </div>\r\n\r\n);\r\n\r\n*/\r\n\r\n\r\n\r\n/*\r\n\r\nclass StockChart extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n      }\r\n\r\n\r\n      componentDidMount() {\r\n        const script = document.createElement('script');\r\n        script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-market-overview.js'\r\n        script.async = true;\r\n        \r\n        \r\n        script.innerHTML = JSON.stringify({ \r\n            \"colorTheme\": \"dark\",\r\n            \"dateRange\": \"1d\",\r\n            \"showChart\": true,\r\n            \"locale\": \"en\",\r\n            \"largeChartUrl\": \"\",\r\n            \"isTransparent\": true,\r\n            \"width\": \"100%\",\r\n            \"height\": \"400\",\r\n            \"plotLineColorGrowing\": \"rgba(47, 196, 141, 1)\",\r\n            \"plotLineColorFalling\": \"rgba(25, 118, 210, 1)\",\r\n            \"gridLineColor\": \"rgba(42, 46, 57, 1)\",\r\n            \"scaleFontColor\": \"rgba(120, 123, 134, 1)\",\r\n            \"belowLineFillColorGrowing\": \"rgba(33, 150, 243, 0.12)\",\r\n            \"belowLineFillColorFalling\": \"rgba(33, 150, 243, 0.12)\",\r\n            \"symbolActiveColor\": \"rgba(33, 150, 243, 0.12)\",\r\n            \"tabs\": [\r\n                {\r\n                  \"title\": \"Indices\",\r\n                  \"symbols\": [\r\n                    {\r\n                      \"s\": \"NYSE:BABA\",\r\n                      \"d\": \"Alibaba\"\r\n                    }\r\n                  ],\r\n                  \"originalTitle\": \"Indices\"\r\n                }\r\n              ]\r\n        }) \r\n        document.getElementById(\"myContainer\").appendChild(script);\r\n    }\r\n    render() {\r\n        return(\r\n      <div id=\"myContainer\" className=\"stockChart-container\">\r\n        <div className=\"tradingview-widget-container\">\r\n          <div className=\"tradingview-widget-container__widget\">\r\n          </div>\r\n        </div>\r\n     </div>\r\n        );\r\n    }\r\n    }\r\n\r\n*/\r\n\r\n\r\n\r\n\r\nexport default StockChart;","import React from \"react\";\r\n\r\nconst hidePlaceholder = (event) => {\r\n    event.target.placeholder = \"\"\r\n}\r\n\r\nconst showPlaceholder = (event) => {\r\n    event.target.placeholder = \"Enter Ticker\"\r\n}\r\n\r\n\r\nconst Form = props => (\r\n\r\n\r\n\r\n    <form onSubmit={props.getTicker} className='form-container'>\r\n        \r\n        <input type=\"text\" name=\"ticker\" placeholder=\"Enter Ticker (Ex: AAPL)\" className=\"input-nav\" id={\"input-mode-\"+props.mode} onFocus={hidePlaceholder} onBlur={showPlaceholder}></input>\r\n        <button className=\"button-nav\">+</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from 'react'\r\nimport Form from '../Components/Form'\r\n\r\n\r\n\r\n\r\nconst navOn = {\r\n    display: 'block'\r\n}\r\n\r\nconst navOff = {\r\n    display: 'none',\r\n}\r\n\r\n\r\nclass Navbar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.navToggler = React.createRef();\r\n        this.navToggle = this.navToggle.bind(this);\r\n      }\r\n    \r\n    state = {\r\n        navState : navOff\r\n    }\r\n\r\n    navToggle() {\r\n        if (this.state.navState === navOff){\r\n            this.setState({\r\n            navState : navOn\r\n            })\r\n        } else {\r\n            this.setState({\r\n                navState: navOff\r\n            })\r\n        }\r\n        \r\n        console.log('toggle')\r\n\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className={\"navbar\"} id={'nav-'+this.props.mode}> \r\n                    <div className='nav-links'>\r\n                        <header id=\"top\"  className='header'> \r\n                            <a href=\"#article-container-darktop\" className=\"page-title\"> Stock Info   </a>\r\n                        </header>\r\n                        <a id=\"nav-link\" href=\"#chart\" > Chart </a>\r\n                        <a id=\"nav-link\" href=\"#info\" > Info </a>\r\n                        <a id=\"nav-link\" href=\"#news\" > News </a>\r\n                    </div>\r\n        \r\n                    <input type=\"checkbox\" id=\"nav-check\" onClick={this.navToggle} ref={this.navToggler}/> \r\n        \r\n                    <label className=\"burger-label\" for=\"nav-check\" id=\"burger-label\">\r\n                        <img src='https://www.stickpng.com/assets/images/588a6507d06f6719692a2d15.png' className=\"burger\" id={\"burger-\"+this.props.mode} />\r\n                    </label>\r\n        \r\n                    <Form\r\n                        getTicker={this.props.getTicker} \r\n                        mode={this.props.mode}\r\n                    />\r\n        \r\n                </nav>\r\n    \r\n            <div className='navlinksmobilewrapper' style={this.state.navState} id={\"navlinksmobilewrapper-\"+this.props.mode}>\r\n                <div className='nav-links-mobile'>\r\n                    <header id=\"top\"  className='header'> \r\n                        <a href=\"#article-container-darktop\" className=\"page-title\"> Stock Info   </a>\r\n                    </header> \r\n                    <a id=\"nav-link\" href=\"#chart\" > Chart </a>\r\n                    <a id=\"nav-link\" href=\"#info\" > Info </a>\r\n                    <a id=\"nav-link\" href=\"#news\" > News </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst News = props => (\r\n    <div>\r\n        {props.articles && <div id=\"news\">\r\n        <div className='news' id={'news-'+props.mode}>\r\n             <h2 className='section-title' id={'section-title-'+props.mode}>News</h2>\r\n             {props.articles}\r\n\r\n\r\n            </div>\r\n        </div>  }\r\n    </div>\r\n);\r\n\r\n\r\n\r\nexport default News;","import React from 'react'\r\n\r\n\r\nconst StockTitle = props => (\r\n\r\n\r\n\r\n\r\n    <div>\r\n        {props.symbol &&\r\n        <div className='price-bar' id={'price-bar-'+props.mode}>\r\n            {props.symbol && <div>\r\n                <div className=\"tickerMain\" id={'tickerMain-'+props.mode}> {props.symbol} </div>\r\n                <div className='stock-name' id={\"stock-name-\"+props.mode}> {props.name}</div>\r\n                <div className={ props.price > props.closeYesterday ? 'stock_price_postiive' : 'stock_price_negative' }> {props.price && <span>$</span>}{props.price} </div>\r\n\r\n                <div className=\"todayPrice\" id={'todayPrice-'+props.mode}>\r\n                    {props.daychange && \r\n                    <p > Today:  <span className={props.changepct > 0 ? 'smallpos' : 'smallneg'}>{props.daychange > 0 ? \"+$\": \"$\"} \r\n                    {props.daychange}</span> (\r\n                    <span className={props.changepct > 0 ? 'smallpos' : 'smallneg'}>{props.changepct > 0 ?\"+\": \"\"}{props.changepct}%</span>)</p> \r\n                    }\r\n                </div>\r\n            </div> }\r\n        </div>\r\n        }\r\n    </div>\r\n\r\n\r\n\r\n)\r\n\r\nexport default StockTitle","import React from 'react';\r\n\r\n\r\n\r\nconst ModeChanger = (props) => (\r\n    <div className='checkbox-container'>\r\n        <div className=\"mode-switch-container-desktop\">\r\n            <input type='checkbox' id='mode-switch' onChange={props.changeMode} ref={props.modeChanger}/> \r\n            <label for='mode-switch' className='toggle'>\r\n                <div className='toggle-image'></div>\r\n                <div className='toggle-text'>\r\n                    <div className='toggle-image-dark'></div>\r\n                    <p className='toggle-text-dark'>Light</p>\r\n                    <p className='toggle-text-light'>Dark</p>\r\n                </div>\r\n            </label>\r\n        </div>\r\n\r\n        <div className=\"mode-switch-container-mobile\" >\r\n            <input type='checkbox' id='mode-switch-mobile' onChange={props.changeMode} ref={props.modeChanger}/> \r\n            <label for='mode-switch-mobile' className='toggle-mobile'>\r\n                <img src='https://simpleicon.com/wp-content/uploads/sun.png' id='img-sun'/>\r\n                <img src='https://static.thenounproject.com/png/595-200.png' id='img-moon' />\r\n            </label>\r\n\r\n        </div>\r\n\r\n    </div>\r\n)\r\n\r\n\r\nexport default ModeChanger","import React from 'react';\r\n\r\nimport { TradingViewEmbed, widgetType } from \"react-tradingview-embed\";\r\n\r\nconst Footer = (props) => (\r\n    <div className=\"footer\" id={\"footer-\"+props.mode}>\r\n        <div className=\"ticker-tape\" >\r\n            <div className={\"ticker-tape-\" + props.mode}>\r\n                {props.mode === 'light' &&\r\n                <TradingViewEmbed\r\n                widgetType={widgetType.TICKER_TAPE}\r\n                widgetConfig={{\r\n                \"symbols\": [\r\n                    {\r\n                    \"proName\": \"OANDA:SPX500USD\",\r\n                    \"title\": \"S&P 500\"\r\n                    },\r\n                    {\r\n                    \"proName\": \"OANDA:NAS100USD\",\r\n                    \"title\": \"Nasdaq 100\"\r\n                    },\r\n                    {\r\n                    \"proName\": \"FX_IDC:EURUSD\",\r\n                    \"title\": \"EUR/USD\"\r\n                    },\r\n                    {\r\n                    \"proName\": \"BITSTAMP:BTCUSD\",\r\n                    \"title\": \"BTC/USD\"\r\n                    },\r\n                    {\r\n                    \"proName\": \"BITSTAMP:ETHUSD\",\r\n                    \"title\": \"ETH/USD\"\r\n                    }\r\n                ],\r\n                \"colorTheme\": \"light\",\r\n                \"dateRange\": \"1d\",\r\n                \"locale\": \"en\",\r\n                \"largeChartUrl\": \"\",\r\n                \"isTransparent\": true,\r\n                \"width\": \"100%\",\r\n                \"hide_legend\": true,\r\n                \"displayMode\": \"regular\"\r\n                }}\r\n            />\r\n            }\r\n            {props.mode === 'dark' &&\r\n            <TradingViewEmbed\r\n                widgetType={widgetType.TICKER_TAPE}\r\n                widgetConfig={\r\n                    {\r\n                        \"symbols\": [\r\n                            {\r\n                            \"proName\": \"OANDA:SPX500USD\",\r\n                            \"title\": \"S&P 500\"\r\n                            },\r\n                            {\r\n                            \"proName\": \"OANDA:NAS100USD\",\r\n                            \"title\": \"Nasdaq 100\"\r\n                            },\r\n                            {\r\n                            \"proName\": \"FX_IDC:EURUSD\",\r\n                            \"title\": \"EUR/USD\"\r\n                            },\r\n                            {\r\n                            \"proName\": \"BITSTAMP:BTCUSD\",\r\n                            \"title\": \"BTC/USD\"\r\n                            },\r\n                            {\r\n                            \"proName\": \"BITSTAMP:ETHUSD\",\r\n                            \"title\": \"ETH/USD\"\r\n                            }\r\n                        ],\r\n                        \"colorTheme\": \"dark\",\r\n                        \"isTransparent\": true,\r\n                        \"displayMode\": \"regular\",\r\n                        \"locale\": \"en\",\r\n                        \"hide_legend\": true,\r\n                        \"show_popup_button\": false,\r\n                        \"hide_top_toolbar\": true,\r\n                        \"largeChartUrl\": \"\",\r\n                        \"height\": \"90\"\r\n                    }\r\n            }\r\n            />\r\n            }\r\n    \r\n    \r\n    \r\n            </div>\r\n        \r\n        </div>\r\n    </div>\r\n  );\r\n\r\n\r\n\r\n/*\r\nclass Footer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const script = document.createElement('script');\r\n        script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-ticker-tape.js'\r\n        script.async = true;\r\n        script.innerHTML = JSON.stringify({ \r\n            \"colorTheme\": \"light\",\r\n            \"dateRange\": \"1d\",\r\n            \"locale\": \"en\",\r\n            \"largeChartUrl\": \"\",\r\n            \"isTransparent\": true,\r\n            \"width\": \"100%\",\r\n            \"hide_legend\": true,\r\n            \"displayMode\": \"regular\"\r\n        }) \r\n\r\n        document.getElementById(\"tickerContainer\").appendChild(script);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div id=\"tickerContainer\" className={\"ticker-tape-\" + this.props.mode}>\r\n                <div className=\"tradingview-widget-container\">\r\n                    <div className=\"tradingview-widget-container__widget\"></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n*/\r\n\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\n\r\nconst Enter = (props) => {\r\n\r\n    const hidePlaceholder = (event) => {\r\n        event.target.placeholder = \"\"\r\n    }\r\n\r\n    const showPlaceholder = (event) => {\r\n        event.target.placeholder = \"Enter Ticker\"\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {props.error !== \"valid\" ? (\r\n                <div className=\"enter-wrapper\">\r\n                    {props.error === undefined &&\r\n                    <div className=\"enter\"> \r\n                        <div className={\"enter-\"+props.mode}>\r\n                            <form onSubmit={props.getTicker}>\r\n                            <input type=\"text\" name=\"ticker\" placeholder=\"Enter Ticker\" className=\"enter-input\" id={\"enter-input-\"+props.mode} onFocus={hidePlaceholder} onBlur={showPlaceholder}></input>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                    }\r\n\r\n                    {props.error === \"invalid\" ? \r\n                    <div className=\"enter\"> \r\n                        <div className={\"enter-\"+props.mode}>\r\n                            <form onSubmit={props.getTicker}>\r\n                            <input type=\"text\" name=\"ticker\" placeholder=\"Ticker Not Valid\" className=\"enter-input\" id={\"enter-input-\"+props.mode} onFocus={hidePlaceholder} onBlur={showPlaceholder}></input>\r\n                            </form>\r\n                        </div>\r\n                    </div> : (<div /> )\r\n                    }\r\n                </div>\r\n            ) : <div/>\r\n            }\r\n        </div>  \r\n    )  \r\n}\r\n\r\n\r\n\r\nexport default Enter;","import React from 'react';\r\n\r\n\r\n\r\nimport { TradingViewEmbed, widgetType } from \"react-tradingview-embed\";\r\n\r\nconst Profile = (props) => (\r\n\r\n\r\n    <div className='profile-wrapper'>\r\n        { props.name && <h2 className='section-title' id={'section-title-'+props.mode}>Profile</h2>}\r\n\r\n        {props.name &&\r\n            <div id=\"profile\" className=\"profile\">\r\n            {props.symbol &&\r\n            <div className='profile-widget'>\r\n                {props.mode === 'light' &&\r\n                <TradingViewEmbed\r\n                widgetType={widgetType.COMPANY_PROFILE}\r\n                widgetConfig={\r\n                    {\r\n                        \"symbol\": props.symbol,\r\n                        \"width\": \"100%\",\r\n                        \"height\": \"350\",\r\n                        \"colorTheme\": \"light\",\r\n                        \"isTransparent\": true,\r\n                        \"locale\": \"en\"\r\n                    }\r\n                }\r\n                />\r\n            }\r\n            {props.mode === 'dark' &&\r\n                <div className='profile-widget'>\r\n\r\n                <TradingViewEmbed\r\n                widgetType={widgetType.COMPANY_PROFILE}\r\n                widgetConfig={\r\n                    {\r\n                        \"symbol\": props.symbol,\r\n                        \"width\": \"100%\",\r\n                        \"height\": \"350\",\r\n                        \"colorTheme\": \"dark\",\r\n                        \"isTransparent\": true,\r\n                        \"locale\": \"en\"\r\n                    }\r\n\r\n                }\r\n                />\r\n                </div>\r\n            }\r\n            </div>\r\n            } \r\n            </div>\r\n        }\r\n\r\n    </div>\r\n);\r\n\r\n\r\nexport default Profile","import React from \"react\";\n\nimport StockData from \"./Components/StockData\";\nimport StockChart from \"./Components/StockChart\";\nimport Navbar from \"./Components/NavBar\";\nimport News from \"./Components/News\";\nimport StockTitle from \"./Components/StockTitle\";\nimport ModeChanger from './Components/ModeChange';\nimport Footer from './Components/Footer';\nimport Enter from './Components/Enter';\nimport Profile from './Components/Profile';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst WORLDTRADINGDATA_API_KEY = \"2HhczAOftfU2TiYMAJepZcz5JrUVOVGlpLleKt9ZnGlyKvokZniHKmmBDvYD\";\nconst WORLDTRADINGDATA_API_KEY2 = \"C7pRFbXZRf9nVgqvcoGzdKfsR0zex2TsoR9tJ1Qlimo6NbYitsBOrOjJU4DS\";\nconst NEWS_API_KEY = \"51cbba44e78c467ba6c8352767d4e971\"\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.modeChanger = React.createRef();\n    this.changeMode = this.changeMode.bind(this);\n  }\n\n  state = {\n    name: undefined,\n    symbol: undefined,\n    price: undefined,\n    closeYesterday: undefined,\n    pe: undefined,\n    yearHigh: undefined,\n    yearLow: undefined,\n    exchange: undefined,\n    daychange: undefined,\n    changepct: undefined,\n    open: undefined,\n    dayHigh: undefined,\n    dayLow: undefined,\n    mktCap:undefined,\n    avgVol:undefined,\n    eps:undefined,\n    error: undefined,\n\n    articles: undefined,\n\n    mode: 'light',\n    bg: {\n      backgroundColor: \"white\"\n    },\n\n    toggle: 'N'\n  }\n\n\n  getTicker = async (e) => {\n    e.preventDefault();\n    const ticker = e.target.elements.ticker.value;\n    const api_call = await fetch(`https://api.worldtradingdata.com/api/v1/stock?symbol=${ticker}&api_token=${WORLDTRADINGDATA_API_KEY}`);\n    const api_call2 = await fetch(`https://newsapi.org/v2/everything?q=${ticker}&apiKey=${NEWS_API_KEY}`);\n    const data = await api_call.json();\n    const data2 = await api_call2.json();\n\n    if (ticker) {\n      if (data[\"Message\"] == \"Error! The requested stock(s) could not be found.\") {\n        this.setState({\n          name: undefined,\n          symbol: undefined,\n          price: undefined,\n          closeYesterday: undefined,\n          pe: undefined,\n          yearHigh: undefined,\n          yearLow: undefined,\n          exchange: undefined,\n          daychange: undefined,\n          changepct: undefined,\n          open: undefined,\n          dayHigh: undefined,\n          dayLow: undefined,\n          mktCap:undefined,\n          avgVol:undefined,\n          eps:undefined,\n          error: \"invalid\"\n        });\n    } else {\n        this.setState({\n          name: data.data[0].name,\n          symbol: data.data[0].symbol,\n          price: data.data[0].price,\n          closeYesterday: data.data[0][\"close_yesterday\"],\n          pe: data.data[0].pe,\n          yearHigh: data.data[0][\"52_week_high\"],\n          yearLow: data.data[0][\"52_week_low\"],\n          exchange: data.data[0][\"stock_exchange_short\"],\n          daychange: data.data[0][\"day_change\"],\n          changepct: data.data[0][\"change_pct\"],\n          open: data.data[0][\"price_open\"],\n          dayHigh: data.data[0][\"day_high\"],\n          dayLow: data.data[0][\"day_low\"],\n          mktCap: data.data[0][\"market_cap\"],\n          avgVol: data.data[0][\"volume_avg\"],\n          eps: data.data[0][\"eps\"],\n          error: \"valid\"\n        });\n      }\n    }\n\n    if (ticker) {\n      if (data[\"Message\"] == \"Error! The requested stock(s) could not be found.\") {\n        this.setState({\n          articles: undefined,\n        });\n    } else {\n        this.setState({\n          articles: data2.articles.map((i,index) => (               \n            <div className='news-container'>\n                <a className='article-container' id={'article-container-'+this.state.mode} key={index} href={i.url } target=\"_blank\">\n                    <p className=\"article-source\"> { i.source.name } </p> \n                    <p className=\"article-title\"> { i.title } </p> \n                    <div className='article-info'>\n                        <p className=\"article\"> { i.description } </p> \n                    </div>\n                </a>\n            </div>)\n          )\n\n        });\n      }\n    } else {\n      this.setState({\n        articles: undefined,\n      });\n    }\n\n    if (data[\"Message\"] == \"Error! The requested stock(s) could not be found.\") {\n      this.setState({\n        name: undefined,\n        symbol: undefined,\n        price: undefined,\n        closeYesterday: undefined,\n        pe: undefined,\n        yearHigh: undefined,\n        yearLow: undefined,\n        exchange: undefined,\n        daychange: undefined,\n        changepct: undefined,\n        error: \"invalid\"\n      });\n    }\n\n    if (this.state.toggle === \"N\") {\n      this.setState({\n        toggle: \"Y\"\n      })\n    } else {\n      this.setState({\n        toggle: \"N\"\n      })\n    }\n  }\n\n  changeMode({ target }) {\n    const mode= target.checked ? 'dark' : 'light';\n\n    this.setState({\n      mode : mode\n    });\n\n    const background = target.checked ? {backgroundColor: \"#1B1B1D\"} : {backgroundColor: \"white\"};\n\n    this.setState ({\n      bg: background\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\" style={this.state.bg}>\n\n        <div className='wrapper' id={'wrapper-'+this.state.mode}>\n\n            <Navbar\n              changeMode={this.changeMode}\n              modeChanger={this.modeChanger}\n              mode={this.state.mode}\n              getTicker={this.getTicker} \n              mode={this.state.mode}\n            />\n            <Footer\n              mode={this.state.mode}\n            />\n\n          <div className=\"main\">\n            <ModeChanger\n              changeMode={this.changeMode}\n              modeChanger={this.modeChanger}\n              mode={this.state.mode}\n            />\n\n\n\n            <Enter\n              name={this.state.name}\n              mode={this.state.mode}\n              getTicker={this.getTicker}\n              error={this.state.error}\n            />\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col\">\n                <StockTitle \n                  mode={this.state.mode}\n                  getTicker={this.getTicker}\n                  name={this.state.name} \n                  symbol={this.state.symbol}\n                  price={this.state.price}\n                  closeYesterday={this.state.closeYesterday}\n                  pe={this.state.pe}\n                  yearHigh={this.state.yearHigh}\n                  yearLow={this.state.yearLow}\n                  exchange={this.state.exchange}\n                  daychange={this.state.daychange}\n                  changepct={this.state.changepct}\n                  error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col\">\n                <StockChart\n                  mode={this.state.mode}\n                  getTicker={this.getTicker}\n                  symbol={this.state.symbol}\n                  toggle={this.state.toggle}\n                />\n                </div>\n              </div>\n            </div>\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col\">\n                <StockData\n                  mode={this.state.mode}\n                  getTicker={this.getTicker}\n                  name={this.state.name} \n                  symbol={this.state.symbol}\n                  price={this.state.price}\n                  closeYesterday={this.state.closeYesterday}\n                  pe={this.state.pe}\n                  yearHigh={this.state.yearHigh}\n                  yearLow={this.state.yearLow}\n                  exchange={this.state.exchange}\n                  daychange={this.state.daychange}\n                  changepct={this.state.changepct}\n                  open= {this.state.open}\n                  dayHigh= {this.state.dayHigh}\n                  dayLow= {this.state.dayLow}\n                  mktCap= {this.state.mktCap}\n                  avgVol= {this.state.avgVol}\n                  eps= {this.state.eps}\n                  toggle={this.state.toggle}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col\">\n                <Profile\n                  mode={this.state.mode}\n                  getTicker={this.getTicker}\n                  name={this.state.name} \n                  symbol={this.state.symbol}\n                  price={this.state.price}\n                  closeYesterday={this.state.closeYesterday}\n                  pe={this.state.pe}\n                  yearHigh={this.state.yearHigh}\n                  yearLow={this.state.yearLow}\n                  exchange={this.state.exchange}\n                  daychange={this.state.daychange}\n                  changepct={this.state.changepct}\n                  open= {this.state.open}\n                  dayHigh= {this.state.dayHigh}\n                  dayLow= {this.state.dayLow}\n                  mktCap= {this.state.mktCap}\n                  avgVol= {this.state.avgVol}\n                  eps= {this.state.eps}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col\">\n                <News\n                  mode={this.state.mode}\n                  getTicker={this.getTicker}\n                  articles={this.state.articles}\n                />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport './App.scss'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}